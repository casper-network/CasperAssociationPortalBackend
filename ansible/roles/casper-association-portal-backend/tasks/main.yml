- name: Run prerequisite tasks
  include: prerequisites.yml
  become: true
  tags:
  - prerequisites
  - first_setup

- name: Set up git_version according to environment (PROD)
  set_fact:
    git_version: master
  changed_when: false
  when: git_version is not defined and deployment_env == 'prod'

- name: Set up git_version according to environment (DEV)
  set_fact:
    git_version: development
  when: (deployment_env == 'local' or deployment_env == 'dev') and git_version is not defined
  changed_when: false

- name: Set up git_version according to environment (STAGING)
  set_fact:
    git_version: staging
  when: deployment_env == 'staging' and git_version is not defined
  changed_when: false

#Apache
- name: Loop through apache modules and enable them
  shell: a2enmod {{ item }}
  with_items: "{{ apache.a2enmod.module_list }}"
  when: apache.a2enmod.module_list is defined
  become: true
  tags:
  - apache
  - config
  - first_setup
  register: apache_modules
  changed_when: "'already enabled' not in apache_modules.stdout"

- name: Create server.conf from template
  template:
    src: server.conf.j2
    dest: /etc/apache2/sites-available/server.conf
    owner: root
    group: root
    mode: 0644
  become: true
  tags:
  - apache
  - config
  - first_setup
  when: deployment_env is not defined or deployment_env != 'dev'

- name: Create server.conf from template (DEV)
  template:
    src: server.conf.dev.j2
    dest: /etc/apache2/sites-available/server.conf
    owner: root
    group: root
    mode: 0644
  become: true
  tags:
  - apache
  - config
  - first_setup
  when: deployment_env == 'dev'

- name: Enable server.conf
  shell: a2ensite server.conf
  become: true
  tags:
  - apache
  - config
  - first_setup
  register: apache_server_conf
  changed_when: "'already enabled' not in apache_server_conf.stdout"

- name: Create the app directory
  file:
    dest: "{{ app.home }}"
    state: directory
    owner: "{{ security.app_user }}"
    group: "{{ security.app_user }}"
    mode: 0755
  become: true
  tags:
  - apache
  - config
  - first_setup

# - name: Add it to the safe directories in git
#   shell: git config --global --add safe.directory "{{ app.home }}"
#   become: true

- name: Add the app directory to the safe directories if not there already
  shell: if ! grep -q "{{ app.home }}" ~/.gitconfig; then git config --global --add safe.directory "{{ app.home }}" && echo "Git folder added to the safe directories"; fi
  become: true
  register: git_safe_dir
  changed_when: "'added' in git_safe_dir.stdout"

# Git clone
- name: Clone the CasperAssociationPortalBackend Github repo into the app home
  git:
    repo: https://github.com/ledgerleapllc/CasperAssociationPortalBackend
    dest: "{{ app.home }}"
    version: "{{ git_version }}"
    update: yes
    force: yes
    clone: yes
    depth: 1
  become: true
  tags:
  - git
  - config
  - update
  - first_setup
  register: clone_repo
#  changed_when: "clone_repo.before != clone_repo.after"


- name: Pause the cron service to prevent it from running during the setup
  service:
    name: cron
    state: stopped
  become: true
  tags:
  - apache
  - config
  - first_setup
  when: clone_repo.changed

- name: Ensure the CasperAssociationPortalBackend directory is owned by the app_user
  file:
    dest: "{{ app.home }}"
    state: directory
    owner: "{{ security.app_user }}"
    group: "{{ security.app_user }}"
    mode: 0755
    recurse: true
  become: true
  tags:
  - apache
  - config
  - first_setup
  when: clone_repo.changed

# Todo: Change this to be idempotent and more ansible friendly
- name: Add the gmp extension
  shell: |
    if [ -f /etc/php/7.4/cli/conf.d/20-ext_gmp.ini ];
    then
      echo "gmp extension already set to be loaded"
    else
      echo "extension=php_gmp.so" > /etc/php/7.4/mods-available/ext_gmp.ini
      sudo ln -s /etc/php/7.4/mods-available/ext_gmp.ini 20-ext_gmp.ini
      sudo systemctl restart apache2
    fi
  args:
    chdir: /etc/php/7.4/cli/conf.d
  become: true
  tags:
  - apache
  - config
  - first_setup
  register: gmp_ext_load
  changed_when: "'gmp extension already set to be loaded' not in gmp_ext_load.stdout"


# Composer
- name: Install Composer dependencies without user input
  shell: sudo -u {{ security.app_user }} composer install --no-interaction
  args:
    chdir: "{{ app.home }}"
  tags:
  - composer
  - php
  - config
  - first_setup
  when: clone_repo.changed

- name: Update Composer dependencies without user input
  shell: sudo -u {{ security.app_user }} composer update --no-interaction
  args:
    chdir: "{{ app.home }}"
  tags:
  - composer
  - php
  - config
  - update
  register: composer_update
  changed_when: "'Nothing to install, update or remove' not in composer_update.stderr"

- name: Create .env file from .env.j2
  template:
    src: .env.j2
    dest: "{{ app.home }}/.env"
    owner: "{{ security.app_user }}"
    group: "{{ security.app_user }}"
    mode: 0644
  become: true
  tags:
  - config
  - php
  - update
  - first_setup
  when: clone_repo.changed

# PHP Artisan
- name: Loop through php artisan commands and run them
  shell: yes | php artisan {{ item }}
  args:
    chdir: "{{ app.home }}"
  with_items:
  - "{{ php.artisan.setup_commands }}"
  tags:
  - php
  - artisan
  - update
  - first_setup
  when: clone_repo.changed

- name: Horizon
  shell: sudo supervisorctl reread && sudo supervisorctl update && sudo service supervisor restart
  args:
    chdir: "{{ app.home }}"
  tags:
  - php
  - update
  - horizon
  when: clone_repo.changed

- name: Authorize Laravel to write to the storage directory
  file:
    dest: "{{ app.home }}/storage"
    state: directory
    owner: "www-data"
    group: "www-data"
    mode: 0775
    recurse: true
  become: true

- name: Set up the artisan cron job
  cron:
    name: "{{ app.name }}"
    user: "{{ security.app_user }}"
    job: "cd /var/www/server && php artisan schedule:run 2>&1"
    minute: "*"
    hour: "*"
    day: "*"
    month: "*"
    weekday: "*"
  become: true
  tags:
  - cron
  - update
  - first_setup

- name: Clear config cache
  shell: php artisan config:clear
  args:
    chdir: "{{ app.home }}"
  tags:
  - php
  - artisan
  - update
  - cache
  - first_setup
  when: clone_repo.changed

- name: Resume the cron service to prevent it from running during the setup
  service:
    name: cron
    state: started
  become: true
  tags:
  - apache
  - config
  - first_setup
  when: clone_repo.changed
